[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pharmaceutical-rag"
version = "2.1.0"
description = "Pharmaceutical RAG system with NVIDIA NeMo Retriever integration"
authors = [
    {name = "Pharmaceutical RAG Team", email = "team@pharmaceutical-rag.ai"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["rag", "pharmaceutical", "nvidia", "nemo", "medical", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.optional-dependencies]
medical = [
    "presidio-analyzer>=2.2.0",
    "presidio-anonymizer>=2.2.0",
    "spacy>=3.7.0",
    "scispacy>=0.5.0",
]
nemo = [
    "cupy-cuda12x>=12.0.0",
    "cuvs-cu12>=24.04.0",
    "cudf-cu12>=24.04.0",
    "nvidia-riva-client>=2.14.0",
]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.4.0",
]

# Black Configuration
[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories to exclude
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | env
  | __pycache__
  | \.pytest_cache
  | tmptest
  | tmptest2
  | pubmed_cache
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests", "scripts", "examples"]
known_first_party = ["src"]
known_third_party = [
    "langchain", "langchain_core", "langchain_community", "langchain_nvidia_ai_endpoints",
    "faiss", "numpy", "pandas", "requests", "streamlit", "pydantic",
    "presidio_analyzer", "presidio_anonymizer", "spacy"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["**/__pycache__", "**/venv", "**/env", "**/tmptest*", "**/pubmed_cache"]

# MyPy Configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # Gradually enable
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

# Paths and modules
files = ["src", "tests", "scripts"]
exclude = [
    "venv/",
    "env/",
    "__pycache__/",
    "tmptest/",
    "tmptest2/",
    "pubmed_cache/",
]

# Per-module configuration
[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "presidio_analyzer.*",
    "presidio_anonymizer.*",
    "spacy.*",
    "scispacy.*",
    "cupy.*",
    "cudf.*",
    "cuvs.*",
    "streamlit.*",
    "plotly.*",
    "unstructured.*",
    "sentence_transformers.*",
    "transformers.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "medical: marks tests requiring medical dependencies",
    "nemo: marks tests requiring NeMo dependencies",
    "live: marks tests requiring live API access",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:langchain.*",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
    "*/tmptest*",
    "*/pubmed_cache/*",
    "tests/*",
    "*/test_*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "env", "tmptest", "tmptest2", "pubmed_cache"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

# Pydocstyle Configuration
[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D105", "D107"]  # Relax some docstring requirements
match_dir = "^(?!(tests|venv|env|tmptest|pubmed_cache)).*"
