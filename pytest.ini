[pytest]
# Comprehensive pytest configuration for pharmaceutical RAG system testing

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts =
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10

# Markers for test categorization
markers =
    # Core functionality tests
    unit: Unit tests for individual components
    integration: Integration tests for component interactions (real API tests that call external services)
    e2e: End-to-end workflow tests

    # Pharmaceutical domain tests
    pharmaceutical: Tests specific to pharmaceutical functionality
    safety: Drug safety and interaction tests
    clinical: Clinical research and trials tests
    regulatory: Regulatory compliance tests

    # Performance and scalability tests
    performance: Performance benchmark tests
    load: Load testing for high volume scenarios
    stress: Stress testing for system limits

    # API and external service tests
    api: API integration tests
    nvidia_build: NVIDIA Build platform tests
    openai_sdk: OpenAI SDK compatibility tests

    # Cost and optimization tests
    cost_optimization: Cost monitoring and optimization tests
    free_tier: Free tier utilization tests
    batch_processing: Batch processing optimization tests

    # Quality and reliability tests
    reliability: System reliability and fault tolerance tests
    monitoring: Alert and monitoring system tests
    validation: Data validation and quality tests

    # Test execution categories
    slow: Tests that take longer than 5 seconds
    fast: Tests that complete in under 1 second
    requires_api: Tests requiring external API access
    requires_credentials: Tests requiring API credentials

    # Environment-specific tests
    local: Tests for local development environment
    ci: Tests for continuous integration environment
    production: Tests for production-like environment

# Test timeout configuration (requires pytest-timeout plugin)
# timeout = 300
# timeout_method = thread

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*coroutine.*was never awaited:RuntimeWarning
